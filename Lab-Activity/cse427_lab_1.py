# -*- coding: utf-8 -*-
"""CSE427 : Lab 1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yJOt54ZsWh3javXaUwDFDkN23JFtFlnm
"""

import numpy as np

list1 = [10,20,30,40,50]
arr1 = np.array(list1)
print(arr1)
print(arr1.dtype)

arr2 = np.zeros(5)
print(arr2)
print(arr2.dtype)
print(arr2.size)
print(len(arr2))
#1d er jonno size ar len same mone hobe

arr3 = np.zeros(shape= (2,3), dtype = "int")  #by default float data type use korbe
print(arr3)
print(arr3.size)   #totoal number of elements
print(len(arr3))   #how many rows are there ( the first dimension)

list1 = [
    [10,20,30],
    [40,50,60],
]
arr4 = np.array(list1)
print(arr4)     #np arrays are faster than python list,,, almost 2 to 3 times faster

arr5 = np.array([[50,60,70],
                [10,40,60]])
print(arr4+arr5)
print(arr4 - arr5)

arr6 = arr5.T
print(arr6)

arr6 = 10*np.ones(6)  #onno  kuno number diye populate korte hole multiply kore dile e hobe
print(arr6)

range1 = np.arange(1,10,0.4)  #it allows fractinal step sizes    #python er by defult range function e kora jay na
print(range1)

arr5 = np.array([[50,60,70],
                [10,40,60]])
print(arr5)
print(arr5.shape)

idn = np.eye(5, dtype ="int") #inorder to create identity matrix   #dtype use na korle sob float hisabe genetate hobe
print(idn)

idn = np.identity(5, dtype="int")
print(idn)

arr1 = np.array([10,20,35,25])
print(arr1 + 5)  #sob element er sathe 5 add korar jonno

arr1 = np.array([
    [1,2,3],
    [4,5,6]])
arr2 = np.array([
    [4,5,6],
    [2,4,6]])
print(arr1*arr2)

arr1 = np.array([
    [1,2,3],
    [4,5,6]])
arr2 = np.array([
    [4,5],
    [2,4],
    [7,8]])
print(arr1 @ arr2)  #matrix multiplication

# broadcasting

arr1 = np.array([
    [4,5],
    [2,4],
    [7,8]])
arr2 = np.array([1,2])
arr3 = arr1 + arr2  #broadcasting er somoy dimension match koray fele...like this [[1,2],[1,2],[1,2]]
arr4 = arr1 * arr2
#scalar multiplication ta oo broadcasting er application
print(arr3)
print(arr4)

arr1 = np.array([
    [4,5],
    [2,4],
    [7,8]])
print(arr1 + 5) #eta oo broadcasting kore kora hoy

arr1 = np.array([
    [4,5],
    [2,4],
    [7,8]])
arr2 = arr1.flatten() #multi dimensionial array ke oo 1D te convert kore
print(arr2)

import pandas as pd

s = pd.Series([10,50,30,40,100])
print(s)

print(s.index) #how the range is distributed
print(s.values) #to see the values

name = ["a", "b", "c", "d", "e"]
value = [10,50,30,40,100]
s = pd.Series(value, index = name) #index e 0,1,2 jodi na dekhte chai
print(s)

df = pd.read_csv("/content/Iris.csv")
df

df.head(10)  #first kichu values dekhay [default way te 5 ta dekhabe]

df.tail(10) #last er 10 ta value dekhabe

print(df.shape)

print(df.info())

print(df.describe()) #statistical values gula dekhay

#check non null valus count
print(df.isnull().sum())

print(df.value_counts("Species"))  #eita diye dekha jay je class gula/virdict gula well balanced ki na
# jodi kunota beshi kom hoy taile model biased hoye jabe

df["New"] = [100]*150 #dataframe e new feature add korte hole.
df

print(df["SepalLengthCm"]) #jekono ekta feature dekhar jonno

import matplotlib.pyplot as plt
import numpy as np

x = np.array([0,6])
y = np.array([10, 50])

plt.plot(x,y)  #duita point er moddhe ekta line create kore dibe
plt.show()

points = [3,5,100,34,45]
plt.plot(points, marker = "x")
plt.show()

points = [3,5,100,34,45]
plt.plot(points, "o:r")  #dotted line er jonno
plt.show()

x = np.arange(-10, 11, 1)  #domain load korlam
y = x**2   #function ta dekhlam
plt.plot(x,y)
plt.title("y = x^2 ")
plt.xlabel("x")
plt.ylabel("y")
plt.show()

x = np.arange(-10, 11, 1)  #domain load korlam
y = x**2   #function ta dekhlam
plt.plot(x,y)
plt.title("y = x^2 ")  #uporer title dekhanor jonno
plt.xlabel("x")
plt.ylabel("y")
plt.grid()  #gridlines dekhanor jonno
plt.show()

x = np.arange(-10,11,1)

y1 = x**2
plt.subplot(3,2,1)  #parameter :   row, column, index
plt.plot(x,y1)

y2 = x**3
plt.subplot(3,2,2)
plt.plot(x,y2)
y3 = 2*x
plt.subplot(3,2,3)
plt.plot(x,y3)
y4 = np.sin(x)
plt.subplot(3,2,4)
plt.plot(x,y4)
y5 = x-2
plt.subplot(3,2,5)
plt.plot(x,y5)
y6 = 3*x**2 + 5
plt.subplot(3,2,6)
plt.plot(x,y6)
plt.show()

#scatter plot
x = np.arange(-10, 11, 1)  #domain load korlam
y = x**2   #function ta dekhlam
plt.scatter(x,y, color = "green")
plt.title("y = x^2 ")  #uporer title dekhanor jonno
plt.xlabel("x")
plt.ylabel("y")
plt.grid()  #gridlines dekhanor jonno
plt.show()

x = np.random.normal(150,20,250) #mean , standard daviation , samples(length)
plt.hist(x)
plt.show()